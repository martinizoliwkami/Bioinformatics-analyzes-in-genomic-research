##ZAJĘCIA 8
install.packages(c("DT", "dplyr", "qqman"))
BiocManager::install(c("rrBLUP", "BGLR", "SNPRelate", "poolr"))
library(rrBLUP)
library(BGLR)
library(DT)
library(SNPRelate)
library(dplyr)
library(qqman)
library(poolr)

genotypy_file <- "C://Users//marty//Desktop//genotyp11.ped"
subpopulacje_file <- "C://Users//marty//Desktop//subpop.fam"
mapowanie_file <- "C://Users//marty//Desktop//mapowanie.map"

#wczytanie danych
genotypy <- read.table(genotypy_file, header = FALSE)
subpopulacje <- read.table(subpopulacje_file, header = FALSE)
mapowanie <- read.table(mapowanie_file, header = FALSE)

#przekodowanie markerów
genotypy[genotypy == 2] <- NA # 2 → NA (brakujące dane)
genotypy[genotypy == 0] <- 0  # 0 → 0 (homozygota dla allelu głównego)
genotypy[genotypy == 1] <- 1  # 1 → 1 (heterozygota)
genotypy[genotypy == 3] <- 2  # 3 → 2 (homozygota dla allelu mniejszościowego)

#transpozycja macierzy genotypów
genotypy_t <- t(genotypy)

#wymiary macierzy
cat("Wymiary macierzy genotypów:", dim(genotypy_t), "\n")

#wczytanie danych fenotypowych
fenotypy_file <- "C://Users//marty//Desktop//fenotypy.csv"
fenotypy <- read.csv(fenotypy_file)

#wyodrębnienie pierwszej cechy
first_trait <- fenotypy[, 1]

#dopasowanie danych fenotypowych do danych genotypowych
complete_data <- na.omit(cbind(first_trait, genotypy_t))

#zastąpienie brakujących danych markerowych średnią wartością danego markera
genotypy_t[is.na(genotypy_t)] <- colMeans(genotypy_t, na.rm = TRUE)

#ddfiltrowanie markerów z MAF < 5%
MAF <- apply(genotypy_t, 2, function(x) mean(x == 1, na.rm = TRUE))
genotypy_t_filtered <- genotypy_t[, MAF >= 0.05]

#zaktualizowanie pliku
mapowanie_filtered <- mapowanie[MAF >= 0.05, ]

cat("wymiary danych genotypowych po filtracji", dim(genotypy_t_filtered), "\n")

#PCA
#macierz markerów
genotypy_pca <- genotypy_t_filtered

#wykonanie PCA
pca_result <- prcomp(genotypy_pca)

gmsp_file <- "C://Users//marty//Desktop//gmsp.csv"

#wczytanie informacji o subpopulacjach z pliku gmsp.csv
gmsp <- read.csv(gmsp_file)

#dodanie subpopulacji do wyników PCA
pca_df <- data.frame(PC1 = pca_result$x[, 1], PC2 = pca_result$x[, 2], Subpopulation = gmsp$Subpopulation)

#PCA
library(ggplot2)
ggplot(pca_df, aes(x = PC1, y = PC2, color = Subpopulation)) +
  geom_point() +
  labs(title = "PCA")

#analiza gwas
GWAS_result <- GWAS(fenotypy = first_trait, geno = genotypy_t_filtered)

#skorygowanie wyników GWAS dla testów wielokrotnych <- z chatu gpt
library(qvalue)
gw <- qvalue(GWAS_result$pvalue)
p_threshold <- gw$lfdr
cat("Próg istotności dla testów wielokrotnych:", p_threshold, "\n")

# wyodrębnienie waznych markerów SNP
significant_snps <- GWAS_result[GWAS_result$pvalue < p_threshold, ]
cat("Liczba istotnych markerów SNP:", nrow(significant_snps), "\n")

#Manhattan plot
manhattan(GWAS_result, chr = "chr", bp = "position", p = "pvalue", snp = "snp_id", 
          col = c("red", "green"), suggestiveline = -log10(1e-04), logp = TRUE)

cat("potencjalnie istotne markery SNP:\n")
print(significant_snps)

cat("Wnioski z analizy PCA i GWAS:\n")
cat("- PCA wykazało różnice między subpopulacjami.\n")
cat("- W wynikach GWAS znaleziono markery związane z interesującymi cechami.\n")


##ZAJĘCIA 11
#instalacja pakietów

if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("VariantTools", "Rsamtools", "GenomicRanges", "GenomicFeatures", "VariantAnnotation", "BiocParallel")

library(VariantTools)
library(Rsamtools)
library(GenomicRanges)
library(GenomicFeatures)
library(VariantAnnotation)
library(BiocParallel)

#konfiguracja i wprowadzenie danych

setwd("C://Users//marty//Desktop//")
list.files()
bamfile <- "C://Users//marty//Desktop//aligned_sample.BAM"
bam <- BamFile(bamfile)

ref_genome <- "C://Users//marty//Desktop//ecoli_reference.fasta"
fa <- FaFile(ref_genome)
input_bam <- "C://Users//marty//Desktop//aligned_sample.BAM"
output_bam <- "C://Users//marty//Desktop//sorted_aligned_sample.BAM"
sortBam(file = input_bam, destination = output_bam, overwrite = TRUE)
sorted_bam <- paste0(output_bam, ".bam")

# indeksowanie plików
indexFa(ref_genome)
indexBam(sorted_bam)

# kontrola jakości 
scanBamHeader(bam)
idxstats <- idxstatsBam(sorted_bam)
print(idxstats)
coverage_data <- coverage(sorted_bam)
summary(coverage_data[[1]])
plot(coverage_data[[1]], main = "pokrycie genomu sekwencji", ylab = "pokrycie", xlab = "pozycja w genomie")

# wykrywanie wariantow <- nie działało mi to w ogóle z plików na githubie, spróbowałam dwóch sposobów <- z youtuba i z chatu gpt
#dopiero czat pomógł, więc wstawiłam, dodał tak jakby podwójnie procenty, nie rozumiem, ale działa 

pileup_param <- PileupParam(
    distinguish_strands = FALSE,
    distinguish_nucleotides = TRUE,
    min_base_quality = 20
)

pile <- pileup(sorted_bam, scanBamParam = ScanBamParam(), pileupParam = pileup_param)

library(dplyr)

pile_df <- pile %>%
    mutate(seqnames = as.character(seqnames)) %>%
    mutate(seqnames = ifelse(seqnames == "U00096.3", "NC_000913.3", seqnames))

variant_candidates <- pile_df %>%
    group_by(seqnames, pos) %>%
    summarise(
        total = sum(count),
        A = sum(count[nucleotide == "A"]),
        C = sum(count[nucleotide == "C"]),
        G = sum(count[nucleotide == "G"]),
        T = sum(count[nucleotide == "T"]),
        .groups = 'drop'
    ) %>%
    mutate(
        ref = as.character(getSeq(fa, GRanges(seqnames, IRanges(pos, pos))))
    ) %>%
    rowwise() %>%>%
    mutate(
        alt_alleles = list(setdiff(c("A", "C", "G", "T"), ref)),
        ref_count = sum(c_across(c("A", "C", "G", "T"))[ref]),
        alt_count = sum(c_across(c("A", "C", "G", "T"))[alt_alleles])
    ) %>%
    ungroup() %>%

#filtracja minimalnej liczby odczytów i filtrowane na podstawie proporcji,
#pierwsze wybiera te, gdzie odczyt jest większy/równy pięć, więc odrzucamy bardzo małe liczby odczytów,
które mogą być błędem.
#drugie wybiera te, gdzie całkowita loiczba odczytów to conajmniej 20% 
    filter(alt_count >= 5) %>%
    filter((alt_count / total) >= 0.2)

head(variant_candidates)
filtered_variants <- variant_candidates %>%
    filter(total >= 10, alt_count / total >= 0.2, alt_count >= 5)

cat("wairanty przed filtrowaniem", nrow(variant_candidates), "\n")
cat("warianty po filtrowaniu", nrow(filtered_variants), "\n")

#kolejne zajęcia, instlauje wymagane pakiety i wczytuje dane 

df_variants <- as.data.frame(filtered_variants)
write.csv(df_variants, "C://Users//marty//Desktop//wyniki_bioinf.csv")

packages <- c("rrBLUP"
   , "BGLR"
   , "DT"
   , "SNPRelate"
   , "dplyr"
   , "qqman"
   , "poolr")

{for (pkg in packages) {
  if(!require(pkg, character.only = TRUE)) {
    install.packages(pkg, dependencies = TRUE)
    }
  }
}

library(pkg, character.only = TRUE)
Geno <- read_ped("sativas413.ped")
# wczytujemy kolumny jako osobne wartości
p = Geno$p
n = Geno$n
Geno = Geno$x
head(Geno)
Geno
FAM <- read.table("sativas413.fam")
head(FAM)
MAP <- read.table("sativas413.map")
head(MAP)

#przekodowuje dane i robię macierz, potem transpozycja i podaje jej wymiary
Geno[Geno == 2] <- NA
Geno[Geno == 0] <- 0
Geno[Geno == 1] <- 1
Geno[Geno == 3] <- 2
Geno <- matrix(Geno, nrow = p, ncol = n, byrow = TRUE)
Geno <- t(Geno)
dim(Geno) #to podaje liczbę snipów i osobników

#wczytuje dane fenotypowe

rice.pheno <- read.table("RiceDiversity_44K_Phenotypes_34traits_PLINK.txt",
                         header = TRUE, stringsAsFactors = FALSE, sep = "\t")
head(rice.pheno)
dim(rice.pheno)
rownames(Geno) <- FAM$V2
table(rownames(Geno) == rice.pheno$NSFTVID)

#sprawdzam pierwszą cechę - wyodrębniam ją
y <- matrix(rice.pheno$Flowering.time.at.Arkansas)
rownames(y) <- rice.pheno$NSFTVID
index <- !is.na(y)
y <- y[index, 1, drop = FALSE]
Geno <- Geno[index, ]
table(rownames(Geno) == rownames(y))
for (j in 1:ncol(Geno)){
  Geno[, j] <- ifelse(is.na(Geno[, j]), mean(Geno[, j], nar.rm = TRUE), Geno[, j])
}

# obliczanie frekwencji allelu mniejszościowego dla każdego SNP
p <- colSums(Geno)/(2 * nrow(Geno))

# definiuje MAF (kolumny mające małą częstość allelu mniejszościowego) mniejsze od 5%
maf <- ifelse(p > 0.5, 1-p, p)
maf.index <- which(maf < 0.05)
Geno1 <- Geno[, -maf.index]
dim(Geno1)
MAP <- read.table("sativas413.map")
dim(MAP)
MAP1 <- MAP[-maf.index, ]
dim(MAP1)

#analiza PCA
Geno1 <- as.matrix(Geno1)
sample <- row.names(Geno1)
length(sample)
colnames(Geno1) <- MAP1$V2
snp.id <- colnames(Geno1)
length(snp.id)

#tworzenie pliku GDS <- od tego momentu kod mi nie działał i do teraz nie umiem go naprawić
#nie jestem w stanie wczytać pliku do analizy GWAS
snpgdsCreateGeno("44k.gds", genmat = Geno1, sample.id = sample, snp.id = snp.id, 
                 snp.chromosome = MAP1$V1, snp.position = MAP1$V4, snpfirstdim = FALSE)

geno_44k <- snpgdsOpen("44k.gds")
snpgdsSummary("44k.gds")
pca <- snpgdsPCA(geno_44k, snp.id = colnames(Geno1))
pca <- data.frame(sample.id = row.names(Geno1), 
                  EV1 = pca$eigenvect[, 1], 
                  EV2 = pca$eigenvect[, 2], 
                  EV3 = pca$eigenvect[, 3], 
                  EV4 = pca$eigenvect[, 4], 
                  stringsAsFactors = FALSE)

plot(pca$EV2, pca$EV1, xlab = "PC2", ylab = "PC1")
pca_1 <- read.csv("RiceDiversity.44K.germplasm.csv", 
                  header = TRUE, skip = 1, stringsAsFactors = FALSE)
pca_2 <- pca_1[match(pca$sample.id, pca_1$NSFTV.ID), ]

pca_population <- cbind(pca_2$Sub.population, pca)
colnames(pca_population)[1] <- "population"

plot(pca_population$EV1, pca_population$EV2, xlab = "PC1", ylab = "PC2", 
     col = c(1:6)[factor(pca_population$population)])
legend(x = "topright", legend = levels(factor(pca_population$population)), 
       col = c(1:6), pch = 1, cex = 0.6)


#połączenie PCA do informacji o populacji, następnie tworzenie wykresu punktowego PCA 
pca_1 <- read.csv("RiceDiversity.44K.germplasm.csv", 
                  header = TRUE, skip = 1, stringsAsFactors = FALSE)
pca_2 <- pca_1[match(pca$sample.id, pca_1$NSFTV.ID), ]

pca_population <- cbind(pca_2$Sub.population, pca)
colnames(pca_population)[1] <- "population"

plot(pca_population$EV1, pca_population$EV2, xlab = "PC1", ylab = "PC2", 
     col = c(1:6)[factor(pca_population$population)])
legend(x = "topright", legend = levels(factor(pca_population$population)), 
       col = c(1:6), pch = 1, cex = 0.6)
geno_final <- data.frame(marker = MAP1[, 2], chrom = MAP1[, 1], pos = MAP1[, 4], 
                         t(Geno1 - 1), check.names = FALSE)

#zestawia mi to dane fenotypowe
pheno_final <- data.frame(NSFTV_ID = rownames(y), y = y)

#analiza gwas - bierze dane genotypowe i fenotypowe, min. częstość allelu mniejszościowego to 5%, korekta na strukturę populacji
GWAS <- GWAS(pheno_final, geno_final, min.MAF = 0.05, P3D = TRUE, plot = TRUE) #tutaj dorabiam wykres, ale to sobie sprawdzałam jak wygląda

#wyodrębniam markety snipów, istotne i podaje ich listę, a potem tworzy wykres Manhattan. 
GWAS_1 <- GWAS %>% filter(y != "0")
GWAS_1 %>% filter(y < 1e-04)
head(GWAS_1)
manhattan(x = GWAS_1, chr = "chrom", bp = "pos", p = "y", snp = "marker", 
          col = c("blue4", "orange3"), suggestiveline = -log10(1e-04), logp = TRUE)


##ZAJĘCIA 12 - kod z notatnika
BiocManager::install(c("VariantAnnotation", "GenomicRanges", "AnnotationHub"))
library(VariantAnnotation)
library(GenomicRanges)
library(AnnotationHub)

vcf_file <- "C:\\Users\\marty\\Desktop\\bioinf\\11113121313.vcf"

# Wczytanie danych do obiektu typu VCF
vcf <- readVcf(vcf_file, genome = "hg19")

# wyświetlenie podstawowych informacji o pliku
header <- header(vcf)
print(header)
info_fields <- info(header)
format_fields <- geno(header)

print("INFO fields:")
print(info_fields)
print("FORMAT fields:")
print(format_fields)

variant_count <- length(rowRanges(vcf))
cat("l.war", variant_count, "\n")

#analiza jakości pliku 
qual_values <- qual(vcf)
summary(qual_values)
vcf_filtered <- vcf[qual_values > 20]
cat("l.war po filtracji", length(rowRanges(vcf_filtered)), "\n")

annotation_hub <- AnnotationHub()

# wyszukanie danych TxDb dla genomu hg19 <- są wbudowane w ten pakiet Annotation_Hub
txdb_query <- query(annotation_hub, "TxDb.Hsapiens.UCSC.hg19.knownGene")

# wybranie pierwszego wyniku
txdb_object <- txdb_query[[1]]

row_ranges <- rowRanges(vcf_filtered)  #pobranie zakresów wierszy z VCF
annotated_variants <- locateVariants(row_ranges, txdb_object, AllVariants())
print(annotated_variants)

# analiza konrketnych wariantów z zad 4
utr_variants <- subset(annotated_variants, LOCATION %in% c("fiveUTR", "threeUTR"))
cat("liczba wariantów w regionach UTR:", nrow(utr_variants), "\n")
intergenic_variants <- subset(annotated_variants, LOCATION == "intergenic")
cat("liczba wariantów międzygenowych:", nrow(intergenic_variants), "\n")


# liczba wariantów - przed i po filtracji
cat("liczba wariantów przed filtracją:", variant_count, "\n")
cat("liczba wariantów po filtracji:", length(rowRanges(vcf_filtered)), "\n")

coding_variants <- subset(annotated_variants, LOCATION %in% c("coding", "exon"))
cat("liczba wariantów w regionach kodujących", nrow(coding_variants), "\n")
cat("liczba wariantów międzygenowych", nrow(intergenic_variants), "\n")


##ZAJĘCIA 13 - nie wszystkie, bo niektóre mi nie działały i nadal nie wiem dlaczego. 

library(ggplot2)
data(iris)
ggplot(iris, aes(x = Species, y = Sepal.Length, fill=Species)) +
geom_boxplot() + labs(title="Boxplot - Długość działki kielicha
gatunków irysa")

ggplot(iris, aes(x = Sepal.Width)) + geom_histogram(binwidth = 0.2,
fill="lightblue", color="black") + labs(title="Szerokość
działki kielicha")

ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) +
geom_point() + labs(title="Scatter o zależności")

ggplot(iris, aes(x=Species, y=Sepal.Width, fill=Species)) +
geom_violin(alpha=0.5) + geom_boxplot(width=0.1, color="black",
outlier.shape=NA) + labs(title="Violin i Boxplot - Iris")


install.packages("waffle")
library(waffle)
parts <- c(`Cat A (50)`=50, `Cat B (30)`=30, `Cat C (20)`=20)
waffle(parts, rows=5, 
       title="Waffle Plot",
       legend_pos = "bottom")

#Wykres wulkaniczy metodą EnhancedVolcano

 BiocManager::install("EnhancedVolcano")
library(EnhancedVolcano)
EnhancedVolcano(df_volcano,
  lab = df_volcano$gene,
  x = 'log2FC',
  y = 'pval',
  pCutoff = 0.02,
  FCcutoff = 1,
  title = 'wykres',
  subtitle = 'de',
  legendPosition = "right")

#Wykres redukcji PCA

data(iris)
pca_result <- prcomp(iris[,1:4], center = TRUE, scale. = TRUE)

pca_df <- data.frame(
  PC1 = pca_result$x[,1],
  PC2 = pca_result$x[,2],
  Species = iris$Species
)

ggplot(pca_df, aes(x=PC1, y=PC2, color=Species)) +
  geom_point() +
  labs(title="PCA - Iris")


#Wykres redukcji SNE

install.packages("Rtsne")
library(Rtsne)

# czyścimy kolumny z wielokrotności
(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
iris_nodup <- iris[!duplicated(iris[,1:4]), ]

# robi nam się R- SNE i potem tworzymy z tego nowe dane, które umieszczamy w wykresie.
tsne_out <- Rtsne(iris_nodup[,1:4], pca=FALSE, perplexity=20, max_iter=500)

library(ggplot2)
tsne_df <- data.frame(
  X = tsne_out$Y[,1],
  Y = tsne_out$Y[,2],
  Species = iris_nodup$Species  # bo usunęliśmy te same wiersze
)

ggplot(tsne_df, aes(x=X, y=Y, color=Species)) +
  geom_point() +
  labs(title="t-SNE)")








